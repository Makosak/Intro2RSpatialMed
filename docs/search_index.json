[
["01-intro.html", "1 Introduction 1.1 Load Spatial Data 1.2 Non-Spatial &amp; Spatial Views 1.3 Spatial Data Structure 1.4 Exploring Coordinate Reference Systems 1.5 Refine Basic Map 1.6 Arrange multiple maps 1.7 Interactive Mode 1.8 Overlay Zip Code Boundaries More Resources", " 1 Introduction In the workshop, we learned about: What is Spatial Data? What is the sf framework for R? To delve in further, let’s see some spatial data in action. We’ll work with the sf library first. library(sf) ## Linking to GEOS 3.7.2, GDAL 2.4.2, PROJ 5.2.0 1.1 Load Spatial Data First load in the shapefile. Remember, this type of data is actually comprised of multiple files. All need to be present in order to read correctly. Chi_tracts = st_read(&quot;data/geo_export_aae47441-adab-4aca-8cb0-2e0c0114096e.shp&quot;) ## Reading layer `geo_export_aae47441-adab-4aca-8cb0-2e0c0114096e&#39; from data source ## `/Users/maryniakolak/code/Intro2RSpatialMed/data/geo_export_aae47441-adab-4aca-8cb0-2e0c0114096e.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 801 features and 9 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -87.94025 ymin: 41.64429 xmax: -87.52366 ymax: 42.02392 ## CRS: 4326 1.2 Non-Spatial &amp; Spatial Views Always inspect data when loading in. First we look at a non-spatial view. head(Chi_tracts) ## Simple feature collection with 6 features and 9 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -87.68822 ymin: 41.72902 xmax: -87.62394 ymax: 41.87455 ## CRS: 4326 ## commarea commarea_n countyfp10 geoid10 name10 namelsad10 notes ## 1 44 44 031 17031842400 8424 Census Tract 8424 &lt;NA&gt; ## 2 59 59 031 17031840300 8403 Census Tract 8403 &lt;NA&gt; ## 3 34 34 031 17031841100 8411 Census Tract 8411 &lt;NA&gt; ## 4 31 31 031 17031841200 8412 Census Tract 8412 &lt;NA&gt; ## 5 32 32 031 17031839000 8390 Census Tract 8390 &lt;NA&gt; ## 6 28 28 031 17031838200 8382 Census Tract 8382 &lt;NA&gt; ## statefp10 tractce10 geometry ## 1 17 842400 POLYGON ((-87.62405 41.7302... ## 2 17 840300 POLYGON ((-87.68608 41.8229... ## 3 17 841100 POLYGON ((-87.62935 41.8528... ## 4 17 841200 POLYGON ((-87.68813 41.8556... ## 5 17 839000 POLYGON ((-87.63312 41.8744... ## 6 17 838200 POLYGON ((-87.66782 41.8741... Note the last column – this is a spatially enabled column. The data is no longer a ‘shapefile’ but an `sf’ object, comprised of polygons. We can use a baseR function to view the spatial dimension. The sf framework enables previews of each attribute in our spatial file. plot(Chi_tracts) 1.3 Spatial Data Structure Check out the data structure of this file… What object is it? str(Chi_tracts) ## Classes &#39;sf&#39; and &#39;data.frame&#39;: 801 obs. of 10 variables: ## $ commarea : Factor w/ 77 levels &quot;1&quot;,&quot;10&quot;,&quot;11&quot;,..: 39 55 28 25 26 21 62 49 74 75 ... ## $ commarea_n: num 44 59 34 31 32 28 65 53 76 77 ... ## $ countyfp10: Factor w/ 1 level &quot;031&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ geoid10 : Factor w/ 801 levels &quot;17031010100&quot;,..: 785 767 772 773 756 751 584 513 684 34 ... ## $ name10 : Factor w/ 801 levels &quot;1001&quot;,&quot;1002&quot;,..: 782 764 769 770 753 748 545 443 663 266 ... ## $ namelsad10: Factor w/ 801 levels &quot;Census Tract 1001&quot;,..: 782 764 769 770 753 748 545 443 663 266 ... ## $ notes : Factor w/ 7 levels &quot;Half in CA 64 (Midway Airport)&quot;,..: NA NA NA NA NA NA NA NA NA NA ... ## $ statefp10 : Factor w/ 1 level &quot;17&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ tractce10 : Factor w/ 801 levels &quot;010100&quot;,&quot;010201&quot;,..: 785 767 772 773 756 751 584 513 684 34 ... ## $ geometry :sfc_POLYGON of length 801; first list element: List of 1 ## ..$ : num [1:243, 1:2] -87.6 -87.6 -87.6 -87.6 -87.6 ... ## ..- attr(*, &quot;class&quot;)= chr &quot;XY&quot; &quot;POLYGON&quot; &quot;sfg&quot; ## - attr(*, &quot;sf_column&quot;)= chr &quot;geometry&quot; ## - attr(*, &quot;agr&quot;)= Factor w/ 3 levels &quot;constant&quot;,&quot;aggregate&quot;,..: NA NA NA NA NA NA NA NA NA ## ..- attr(*, &quot;names&quot;)= chr &quot;commarea&quot; &quot;commarea_n&quot; &quot;countyfp10&quot; &quot;geoid10&quot; ... Check out the coordinate reference system. What is it? What are the units? st_crs(Chi_tracts) ## Coordinate Reference System: ## User input: 4326 ## wkt: ## GEOGCS[&quot;WGS84(DD)&quot;, ## DATUM[&quot;WGS84&quot;, ## SPHEROID[&quot;WGS84&quot;,6378137.0,298.257223563]], ## PRIMEM[&quot;Greenwich&quot;,0.0], ## UNIT[&quot;degree&quot;,0.017453292519943295], ## AXIS[&quot;Geodetic longitude&quot;,EAST], ## AXIS[&quot;Geodetic latitude&quot;,NORTH]] 1.4 Exploring Coordinate Reference Systems Lets see how switching CRS changes our object. First we’ll try the Mollweide coordinate reference system that does a good job preserving area across the globe. To transform our CRS, we use the st_transform function. To plot, we use baseR again but with some paremeter updates. Finally, we check out the CRS of our new object. What are the units? Any other details to note? Will this be appropriate for our spatial analysis? Chi_tracts.moll &lt;- st_transform(Chi_tracts, crs = &quot;+proj=moll&quot;) plot(st_geometry(Chi_tracts.moll), border = &quot;gray&quot;, lwd = 2, main = &quot;Mollweide&quot;, sub=&quot;preserves areas&quot;) st_crs(Chi_tracts.moll) ## Coordinate Reference System: ## User input: +proj=moll ## wkt: ## PROJCS[&quot;unnamed&quot;, ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;unknown&quot;, ## SPHEROID[&quot;WGS84&quot;,6378137,298.257223563]], ## PRIMEM[&quot;Greenwich&quot;,0], ## UNIT[&quot;degree&quot;,0.0174532925199433]], ## PROJECTION[&quot;Mollweide&quot;], ## PARAMETER[&quot;central_meridian&quot;,0], ## PARAMETER[&quot;false_easting&quot;,0], ## PARAMETER[&quot;false_northing&quot;,0]] Next, we’ll try the Winkel CRS, which is a compromise projection that facilitates minimal distortion for area, distance, and angles. We use the same approach, recyling the code with new inputs. Chi_tracts.54019 = st_transform(Chi_tracts, 54019) plot(st_geometry(Chi_tracts.54019), border = &quot;gray&quot;, lwd = 2, main = &quot;Winkel&quot;, sub=&quot;minimal distortion&quot;) st_crs(Chi_tracts.54019) ## Coordinate Reference System: ## User input: EPSG:54019 ## wkt: ## PROJCS[&quot;World_Winkel_II&quot;, ## GEOGCS[&quot;GCS_WGS_1984&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS_84&quot;,6378137.0,298.257223563]], ## PRIMEM[&quot;Greenwich&quot;,0.0], ## UNIT[&quot;Degree&quot;,0.0174532925199433]], ## PROJECTION[&quot;Winkel_II&quot;], ## PARAMETER[&quot;False_Easting&quot;,0.0], ## PARAMETER[&quot;False_Northing&quot;,0.0], ## PARAMETER[&quot;Central_Meridian&quot;,0.0], ## PARAMETER[&quot;Standard_Parallel_1&quot;,50.45977625218981], ## UNIT[&quot;Meter&quot;,1.0], ## AUTHORITY[&quot;Esri&quot;,&quot;54019&quot;]] We could also try a totally different projection, to see how that changes our spatial object. Let’s use the “Old Hawaiian UTM Zone 4n” projection, with the EPSG identified from an online search. How does this fare? Chi_tracts.Hawaii = st_transform(Chi_tracts, 102114) plot(st_geometry(Chi_tracts.Hawaii), border = &quot;gray&quot;, lwd = 2, main = &quot;Old Hawaiian UTM Zone 4N&quot;, sub=&quot;wrong projection!&quot;) Finally.. let’s choose a projection that is focused on Illinois, and uses distance as feet or meters, to make it a bit more accessible for our work. EPSG:3435 is a good fit: Chi_tracts.3435 &lt;- st_transform(Chi_tracts, 3435) st_crs(Chi_tracts.3435) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] plot(st_geometry(Chi_tracts.3435), border = &quot;gray&quot;, lwd = 2, main = &quot;NAD83 / Illinois East (ftUS)&quot;, sub=&quot;topo mapping &amp; survey use&quot;) 1.5 Refine Basic Map Now we’ll switch to a more extensive cartographic mapping package, tmap. We approach mapping with one layer at a time. Always start with the object you want to map by calling it with the tm_shape function. Then, at least one descriptive/styling function follows. There are hundreds of variations and paramater specifications, so take your time in exploring tmap and the options. Here we style the tracts with some semi-transparent borders. library(tmap) ## Warning: replacing previous import &#39;sf::st_make_valid&#39; by ## &#39;lwgeom::st_make_valid&#39; when loading &#39;tmap&#39; tm_shape(Chi_tracts) + tm_borders(alpha=0.5) Next we fill the tracts with a light gray, and adjust the color and transparency of borders. We also add a scale bar, positioning it to the left and having a thickness of 0.8 units, and turn off the frame. tm_shape(Chi_tracts) + tm_fill(col = &quot;gray90&quot;) + tm_borders(alpha=0.2, col = &quot;gray10&quot;) + tm_scale_bar(position = (&quot;left&quot;), lwd = 0.8) + tm_layout(frame = F) Check out https://rdrr.io/cran/tmap/man/tm_polygons.html for more ideas! 1.6 Arrange multiple maps Sometimes we want to look at multiple maps at once. Write your mapping function to a new variable, and then call that variable in order of desire using the tmap_arrange function. Hint: this is just one of many! ways to map multiples using tmap… see if you can uncover more in the documentation. tracts.4326 &lt;- tm_shape(Chi_tracts) + tm_fill(col = &quot;gray90&quot;) + tm_layout(frame = F, title = &quot;EPSG 4326&quot;) tracts.54019 &lt;- tm_shape(Chi_tracts.54019) + tm_fill(col = &quot;gray90&quot;) + tm_layout(frame = F, title = &quot;EPSG 54019&quot;) tmap_arrange(tracts.4326, tracts.54019) 1.7 Interactive Mode So far, we’ve been plotting static maps. We can also switch to an interactive map that uses a Leaflet widget by switching the tmap_mode() parameter specification from “plot” to “view.” It’s on “plot” as default. tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing Map the same map as before, and check out the interaction! tm_shape(Chi_tracts) + tm_fill(col = &quot;gray90&quot;) + tm_borders(alpha=0.2, col = &quot;gray10&quot;) + tm_scale_bar(position = (&quot;left&quot;), lwd = 0.8) + tm_layout(frame = F) The tracts are not transparent enough, so we update that here. You can also click the box on the left side to try out other basemaps. See if you can find out how to add a basemap to a static/plotted map, using tmap documentation… tm_shape(Chi_tracts) + tm_fill(col = &quot;gray90&quot;, alpha = 0.5) + tm_borders(alpha=0.2, col = &quot;gray10&quot;) + tm_scale_bar(position = (&quot;left&quot;), lwd = 0.8) + tm_layout(frame = F) We revert back to plot mode for now. tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting 1.8 Overlay Zip Code Boundaries How do census tract areas correspond to zip codes? While tracts better represent neighborhoods, often times we are stuck with zip code level scale in healh research. Here we’ll make a reference map to highlight tract distribution across each zip code. First, we read in zip code boundaries. This data was downloaded directly from the City of Chicago Data Portal as a shapefile. Chi_Zips = st_read(&quot;data/geo_export_54bc15d8-5ef5-40e4-8f72-bb0c6dbac9a5.shp&quot;) ## Reading layer `geo_export_54bc15d8-5ef5-40e4-8f72-bb0c6dbac9a5&#39; from data source ## `/Users/maryniakolak/code/Intro2RSpatialMed/data/geo_export_54bc15d8-5ef5-40e4-8f72-bb0c6dbac9a5.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 61 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -87.94011 ymin: 41.64454 xmax: -87.52414 ymax: 42.02304 ## CRS: 4326 Next, we layer the new shape in – on top of the tracts. We use a thicker border, and try out a new color. Experiment! ## FIRST LAYER: CENSUS TRACT BOUNADRIES tm_shape(Chi_tracts.3435) + tm_fill(col = &quot;gray90&quot;) + tm_borders(alpha=0.2, col = &quot;gray10&quot;) + ## SECOND LAYER: ZIP CODE BOUNDARIES WITH LABEL tm_shape(Chi_Zips) + tm_borders(lwd = 2, col = &quot;#0099CC&quot;) + tm_text(&quot;zip&quot;, size = 0.7) + ## MORE CARTOGRAPHIC STYLE tm_scale_bar(position = (&quot;left&quot;), lwd = 0.8) + tm_layout(frame = F) More Resources On spatial data basics &amp; sf: https://geocompr.robinlovelace.net/intro.html https://geodacenter.github.io/opioid-environment-toolkit/spatial-data-introduction.html On projections: https://desktop.arcgis.com/en/arcmap/10.3/guide-books/map-projections/projection-basics-for-gis-professionals.htm https://geocompr.robinlovelace.net/reproj-geo-data.html https://datacarpentry.org/organization-geospatial/03-crs/index.html On tmap: https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html https://geocompr.robinlovelace.net/adv-map.html "]
]
