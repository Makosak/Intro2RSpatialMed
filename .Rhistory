install.packages("sf")
library(sf)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("r-spatial/sf")
install.packages("sf", configure.args = "--with-proj-lib=/usr/local/lib/")
library(sf)
library("sf")
install.packages("rgdal", configure.args = c("--with-proj-lib=/usr/local/lib/", "--with-proj-include=/usr/local/include/"))
install.packages("sf", configure.args = "--with-proj-lib=/usr/local/lib/")
library(sf)
remove.packages("sf")
install.packages("sf")
library r
librar(sf)
library(sf)
devtools::install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos")
install.packages("rgdal")
library(devtools)
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/opt/libpq/lib")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
str(nc)
plot(nc)
head(nc)
tm_shape(nc) + tm_polygons("BIR79")
library(tmap)
tm_shape(nc) + tm_polygons("BIR79")
tm_shape(nc) + tm_polygons()
tm_shape(nc) + tm_polygons() +
tm_compass() + tm_scale_bar()
tm_shape(nc) + tm_polygons() +
tm_compass(type = "8star", position = c("right", "bottom")) +
tm_scale_bar(breaks = c(0, 100, 200), position = c("left", "bottom"), text.size = 0.8)
library(readr)
health <- read_csv("CHR_LifeRanks2018.csv")
head(health)
nc_new <- merge(nc, health, by.x = "FIPSNO", by.y = "FIPS")
head(nc_new)
plot(nc_new["LengthLife_Rank"])
str(nc_new)
nc_new$LengthLife_Qrt<- as.numeric(nc_new$LengthLife_Qrt)
plot(nc_new["LengthLife_Qrt"])
tm_shape(nc_new) + tm_polygons("LengthLife_Qrt", style = "cat", pal = "-BuPu", position = c("left", "top"), title = "Length of Life (Quartile)" ) +
tm_scale_bar(breaks = c(0, 100), position = c("right", "bottom"), text.size = 0.8)
# Aim: provide a minimal R script
print("Hello geocompr")
str(
print("Hello geocompr"))
# Aim: provide a minimal R script
print("Hello geocomprs")
library(dplyr)
library(sf)
#install.packages("osmextract")
library(osmextract)
iow_osm = oe_get("Italy", provider = "geofabrik", stringsAsFactors = FALSE,
quiet = FALSE, force_download = TRUE, force_vectortranslate = TRUE)
iow_osm = oe_get("Belgium", provider = "geofabrik", stringsAsFactors = FALSE,
quiet = FALSE, force_download = TRUE, force_vectortranslate = TRUE)
# Import and plot DEM
u = "https://github.com/U-Shift/Declives-RedeViaria/releases/download/0.2/IsleOfWightNASA_clip.tif"
f = basename(u)
download.file(url = u, destfile = f, mode = "wb")
dem = raster::raster(f)
# res(dem) #27m of resolution
network = iow_network_segments
iow_network$group = rnet_group(iow_network)
iow_network_clean = iow_network %>% filter(group == 1) # the network with more connected segments
iow_network = iow_osm %>%
dplyr::filter(highway %in% c('primary', "primary_link", 'secondary',"secondary_link",
'tertiary', "tertiary_link", "trunk", "trunk_link",
"residential", "cycleway", "living_street", "unclassified",
"motorway", "motorway_link", "pedestrian", "steps", "track")) #remove: "service"
iow_osm = oe_get("Belgium", provider = "geofabrik", stringsAsFactors = FALSE,
quiet = FALSE, force_download = TRUE, force_vectortranslate = TRUE)
iow_osm = oe_get("Isle of Wight", provider = "geofabrik", stringsAsFactors = FALSE,
quiet = FALSE, force_download = TRUE, force_vectortranslate = TRUE)
iow_network = iow_osm %>%
dplyr::filter(highway %in% c('primary', "primary_link", 'secondary',"secondary_link",
'tertiary', "tertiary_link", "trunk", "trunk_link",
"residential", "cycleway", "living_street", "unclassified",
"motorway", "motorway_link", "pedestrian", "steps", "track")) #remove: "service"
#install.packages("stplanr")
library(stplanr)
iow_network$group = rnet_group(iow_network)
iow_network_clean = iow_network %>% filter(group == 1) # the network with more connected segments
iow_network_segments = rnet_breakup_vertices(iow_network_clean)
# Import and plot DEM
u = "https://github.com/U-Shift/Declives-RedeViaria/releases/download/0.2/IsleOfWightNASA_clip.tif"
f = basename(u)
download.file(url = u, destfile = f, mode = "wb")
dem = raster::raster(f)
# res(dem) #27m of resolution
network = iow_network_segments
library(raster)
plot(dem)
plot(sf::st_geometry(network), add = TRUE) #check if they overlay
library(slopes)
library(geodist)
network$slope = slope_raster(network, dem)
network$slope = network$slope*100 #percentage
summary(network$slope)
# Classify slopes
network$slope_class = network$slope %>%
cut(
breaks = c(0, 3, 5, 8, 10, 20, Inf),
labels = c("0-3: flat", "3-5: mild", "5-8: medium", "8-10: hard",
"10-20: extreme", ">20: impossible"),
right = F
)
round(prop.table(table(network$slope_class))*100,1)
network$length = st_length(network)
library(tmap)
palredgreen = c("#267300", "#70A800", "#FFAA00", "#E60000", "#A80000", "#730000") #color palette
# tmap_mode("view")
tmap_options(basemaps = leaflet::providers$CartoDB.Positron) #basemap
# tmap_mode("view")
tmap_options(basemaps = leaflet::providers$CartoDB.DarkMatter) #basemap
slopemap =
tm_shape(network) +
tm_lines(
col = "slope_class",
palette = palredgreen,
lwd = 2, #line width
title.col = "Slope [%]",
popup.vars = c("Highway" = "highway",
"Length" = "length",
"Slope: " = "slope",
"Class: " = "slope_class"),
popup.format = list(digits = 1),
# id = "slope"
id = "name" #if it gets too memory consuming, delete this line
)
slopemap
tmap_mode("view")
slopemap
slopemap =
tm_shape(network) +
tm_lines(
col = "slope_class",
palette = palredgreen,
lwd = 1, #line width
title.col = "Slope [%]",
popup.vars = c("Highway" = "highway",
"Length" = "length",
"Slope: " = "slope",
"Class: " = "slope_class"),
popup.format = list(digits = 1),
# id = "slope"
id = "name" #if it gets too memory consuming, delete this line
)
slopemap
# Once sf is installed, you can install from CRAN with:
install.packages('tidytransit')
# For the development version from Github:
# install.packages("devtools")
devtools::install_github("r-transit/tidytransit")
# For the development version from Github:
install.packages("devtools")
install.packages("devtools")
devtools::install_github("r-transit/tidytransit")
library(tidytransit)
local_gtfs_path <- system.file("extdata",
"google_transit_nyc_subway.zip",
package = "tidytransit")
nyc <- read_gtfs(local_gtfs_path)
library(sf)
plot(nyc)
head(nyc)
summary(nyc)
head(nyc$stops)
names(nyc)
validation_result <- attr(nyc, "validation_result")
head(validation_result)
head(feedlist)
head(feedlist)
nyc_ferries_gtfs <- feedlist %>%
filter(t=="NYC Ferry GTFS") %>%
pull(url_d) %>%
read_gtfs()
nyc_ferries_gtfs <- feedlist %>%
filter(t=="MPK SA w Krakowie GTFS") %>%
pull(url_d) %>%
read_gtfs()
library(tidyverse)
nyc_ferries_gtfs <- feedlist %>%
filter(t=="MPK SA w Krakowie GTFS") %>%
pull(url_d) %>%
read_gtfs()
nyc_ferries_gtfs <- feedlist %>%
filter(t=="NYC Ferry GTFS") %>%
pull(url_d) %>%
read_gtfs()
library(tidyverse)
unique(feedlist$t)
nyc_ferries_gtfs <- feedlist %>%
filter(t=="Toowoomba GTFS") %>%
pull(url_d) %>%
read_gtfs()
nyc_ferries_gtfs <- feedlist %>%
filter(t=="MTA Queens GTFS") %>%
pull(url_d) %>%
read_gtfs()
plot(nyc_ferries_gtfs$shapes)
plot(nyc_ferries_gtfs$stops)
plot(nyc_ferries_gtfs)
library(tidygeocoder)
methadoneClinics <- read.csv("data/chicago_methadone_nogeometry.csv")
setwd("~/Code/Intro2RSpatialMed")
methadoneClinics <- read.csv("data/chicago_methadone_nogeometry.csv")
head(methadoneClinics)
sample <- geo("2260 N. Elston Ave. Chicago, IL", lat = latitude, long = longitude, method = 'cascade')
head(sample)
str(methadoneClinics)
methadoneClinics$fullAdd <- paste(as.character(methadoneClinics$Address),
as.character(methadoneClinics$City),
as.character(methadoneClinics$State),
as.character(methadoneClinics$Zip))
str(methadoneClinics)
geoCodedClinics <-  geocode(methadoneClinics,
address = 'fullAdd', lat = latitude, long = longitude, method = 'cascade')
head(geoCodedClinics)
geoCodedClinics2 <- na.omit(geoCodedClinics)
dim(geoCodedClinics2)
plot(geoCodedClinics2)
library(sf)
methadoneSf <- st_as_sf(geoCodedClinics2,
coords = c("longitude", "latitude"),
crs = 4326)
plot(methadoneSf)
coords = c("latitude", "longitude"),
AffHousingSf <- st_as_sf(AffHousing,
coords = c("Latitude", "Longitude"),
crs = 4326)
library(sf)
methadoneSf <- st_as_sf(geoCodedClinics2,
coords = c("latitude", "longitude"),
crs = 4326)
plot(methadoneSf)
methadoneSf <- st_as_sf(geoCodedClinics2,
+                         coords = c("latitude", "longitude"),
+                         crs = 3435)
methadoneSf <- st_as_sf(geoCodedClinics2,
coords = c("latitude", "longitude"),
crs = 3435)
plot(methadoneSf)
methadoneSf <- st_as_sf(geoCodedClinics2,
coords = c( "longitude", "latitude"),
crs = 3435)
plot(methadoneSf)
methadoneSf <- st_as_sf(geoCodedClinics2,
coords = c( "longitude", "latitude"),
crs = 4326)
library(tidygeocoder)
methadoneClinics <- read.csv("data/chicago_methadone_nogeometry.csv")
head(methadoneClinics)
sample <- geo("2260 N. Elston Ave. Chicago, IL", lat = latitude, long = longitude, method = 'cascade')
head(sample)
str(methadoneClinics)
methadoneClinics$fullAdd <- paste(as.character(methadoneClinics$Address),
as.character(methadoneClinics$City),
as.character(methadoneClinics$State),
as.character(methadoneClinics$Zip))
geoCodedClinics <-  geocode(methadoneClinics,
address = 'fullAdd', lat = latitude, long = longitude, method = 'cascade')
head(geoCodedClinics)
geoCodedClinics2 <- na.omit(geoCodedClinics)
library(sf)
methadoneSf <- st_as_sf(geoCodedClinics2,
coords = c( "longitude", "latitude"),
crs = 4326)
tmap_mode("view")
tm_shape(methadoneSf) + tm_dots()
library(tmap)
library(tmap)
tmap_mode("view")
tm_shape(methadoneSf) + tm_dots()
Chi_Zipsf <- st_read("data/ChiZipMaster1.geojson")
tmap_mode("plot")
## 1st layer (gets plotted first)
tm_shape(Chi_Zipsf) + tm_fill("Case.Rate...Cumulative",
style="jenks", pal="BuPu", n=4, title = "COVID Rt") +
## 2nd layer (overlay)
tm_shape(methadoneSf) + tm_dots(size = 0.2, col = "gray20") +
## "Hack" a manual symbology for dots in the legend
tm_add_legend("symbol", col = "gray20", size = .2, labels = "Methadone MOUD") +
## Cartographic Styling
tm_layout(legend.outside = TRUE, legend.outside.position = "right")
AffHousing <- read.csv("data/Affordable_Rental_Housing_Developments.csv")
head(AffHousing)
AffHousing <- na.omit(AffHousing)
str(AffHousing)
AffHousingSf <- st_as_sf(AffHousing,
coords = c("Longitude", "Latitude"),
crs = 4326)
tm_shape(AffHousingSf) + tm_dots()
tm_shape(AffHousingSf) + tm_bubbles()
tm_shape(AffHousingSf) + tm_bubbles("Units", col = "BuPu")
tm_shape(AffHousingSf) + tm_bubbles("Units", col = "purple")
tm_shape(AffHousingSf) + tm_bubbles("Units", col = "purple", style = "quantile")
tm_shape(AffHousingSf) + tm_bubbles("Units", col = "purple", style = "pretty")
tm_shape(AffHousingSf) + tm_bubbles("Units", col = "purple", style = "sd")
tm_shape(Chi_Zipsf) + tm_polygons(col = "gray80") +
tm_shape(AffHousingSf) + tm_bubbles("Units", col = "purple")
## Zip Codes with Labels
tm_shape(Chi_Zipsf) + tm_fill("Case.Rate...Cumulative",
style="jenks", pal="BuPu", n=4, title = "COVID Rt") +
tm_text("zip", size = 0.7) +
## Affordable Housing Units
tm_shape(AffHousingSf) + tm_bubbles("Units") +
## Methadone MOUD
tm_shape(methadoneSf) + tm_dots(size = 0.2, col = "gray20") +
## Cartographic Styling
tm_add_legend("symbol", col = "gray20", size = .2, labels = "Methadone MOUD") + tm_layout(legend.outside = TRUE, legend.outside.position = "right")
## Zip Codes with Labels
tm_shape(Chi_Zipsf) + tm_fill("Case.Rate...Cumulative",
style="jenks", pal="BuPu", n=4, title = "COVID Rt")  +
## Affordable Housing Units
tm_shape(AffHousingSf) + tm_bubbles("Units") +
## Methadone MOUD
tm_shape(methadoneSf) + tm_dots(size = 0.2, col = "gray20") +
## Cartographic Styling
tm_add_legend("symbol", col = "gray20", size = .2, labels = "Methadone MOUD") + tm_layout(legend.outside = TRUE, legend.outside.position = "right")
#library(sf)
#library(tmap)
points <- st_read("data/methadoneMOUD.geojson")
areas <- st_read("data/geo_export_54bc15d8-5ef5-40e4-8f72-bb0c6dbac9a5.shp")
dim(points)
dim(areas)
head(points)
head(areas)
areas <- st_transform(areas, 3435)
points <- st_transform(points, 3435)
tm_shape(areas) + tm_polygons() +
tm_shape(points) + tm_dots(size = 1)
pipr <- st_join(points, areas)
head(pipr)
dim(pipr)
dim(points)
dim(areas)
ptcount <- as.data.frame(table(pipr$Zip))
head(ptcount)
names(ptcount) <- c("zip", "MetClnc")
head(ptcount)
head(areas)
areas<- merge(areas, ptcount, by="zip", all = TRUE)
head(areas)
tm_shape(areas) + tm_polygons(col = "gray80") +
tm_shape(areas) + tm_polygons(col = "MetClnc", style = "pretty", alpha = 0.8) +
tm_shape(points) + tm_dots(size = 0.5)
# Create 1mile buffers for each point
ptbuffers <- st_buffer(points, 5280)
tm_shape(areas) + tm_borders() +
tm_shape(ptbuffers) + tm_borders(col = "blue") +
tm_shape(points) + tm_dots(col = "red")
# Create 1mile buffers for each point
ptbuffers <- st_buffer(points, 1)
tm_shape(areas) + tm_borders() +
tm_shape(ptbuffers) + tm_borders(col = "blue") +
tm_shape(points) + tm_dots(col = "red")
tm_shape(areas) + tm_borders() +
tm_shape(ptbuffers) + tm_borders(col = "blue")
head(ptbuffers)
# Create 1mile buffers for each point
ptbuffers <- st_buffer(points, 5280)
head(ptbuffers)
tm_shape(areas) + tm_borders() +
tm_shape(ptbuffers) + tm_borders(col = "blue")
bufferct <- lengths(st_intersects(areas, ptbuffers))
head(bufferct)
# Stick buffer totals back to the census master file
areas <- cbind(areas,bufferct)
head(areas)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.2) +
tm_shape(points) + tm_dots(col = "gray10", alpha = 0.8, size = 0.3)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.2) +
tm_shape(points) + tm_dots(col = "gray10", alpha = 0.2, size = 0.3)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.8) +
tm_shape(points) + tm_dots(col = "gray10", alpha = 0.8, size = 0.3)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.2) +
tm_shape(points) + tm_dots(col = "gray10", alpha = 0.9, size = 0.3)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.2) +
tm_shape(points) + tm_dots(col = "gray10", alpha = 0.7, size = 0.3)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.6) +
tm_shape(points) + tm_dots(col = "gray10", alpha = 0.2, size = 0.3)
tm_shape(areas) + tm_polygons(col = "bufferct", palette = "BuGn", n=5, style = "jenks") +
tm_shape(ptbuffers) + tm_fill(col = "gray90", alpha=0.6) +
tm_shape(points) + tm_dots(col = "gray10", size = 0.3)
