tm_shape(LAcrime.pts) + tm_dots(alpha = 0.9, size = 1, col="red")
## 1st layer (gets plotted first)
tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(alpha = 0.9, size = 0.5, col="red")
## 1st layer (gets plotted first)
tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(alpha = 0.9, size = 0.3, col="red")
## 1st layer (gets plotted first)
tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(alpha = 0.9, size = 0.2, col="red")
## 1st layer (gets plotted first)
tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(alpha = 0.2, size = 0.2, col="red")
## 1st layer (gets plotted first)
tm_shape(LAtracts) + tm_borders(alpha = 0.4) +
## 2nd layer (overlay)
tm_shape(LAcrime.pts) + tm_dots(size = 0.1, col="red")
LAcrimes<-LAcrime.pts
st_crs(LAcrimes)
st_crs(LAtracts)
CRS.new <- st_crs(LAtracts)
LAcrimes <- st_transform(LAcrimes, CRS.new)
#LApip <- over(LAcrimes, LAtracts)
#LAcrimes@data <- cbind(LAcrimes@data, LApip)
#library(tidyverse)
crime_in_tract <- st_join(LAcrimes, LAtracts, join = st_within)
head(test)
crime_tract_count <- as.data.frame(table(crime_in_tract$TRACTCE10))
head(test2)
#LApip <- over(LAcrimes, LAtracts)
#LAcrimes@data <- cbind(LAcrimes@data, LApip)
#library(tidyverse)
crime_in_tract <- st_join(LAcrimes, LAtracts, join = st_within)
head(test)
crime_tract_count <- as.data.frame(table(crime_in_tract$TRACTCE10))
names(crime_tract_count) <- c("TRACTCE10","CrimeCt")
head(crime_tract_count)
head(LAtracts)
tract_tree_sf <- merge(LAtracts, crime_tract_count, by="TRACTCE10")
head(tract_tree_sf)
str(tract_tree_sf)
tmap_mode("plot")
tm_shape(tract_tree_sf) + tm_fill("CrimeCt", n=4, pal = "BuPu", title="LA Homicides in 2015")
head(test)
crime_in_tract <- st_join(LAcrimes, LAtracts, join = st_within)
head(crime_in_tract)
crime_tract_count <- as.data.frame(table(crime_in_tract$TRACTCE10))
names(crime_tract_count) <- c("TRACTCE10","CrimeCt")
head(crime_tract_count)
head(LAtracts)
tract_tree_sf <- merge(LAtracts, crime_tract_count, by="TRACTCE10")
head(tract_tree_sf)
str(tract_tree_sf)
tmap_mode("plot")
tm_shape(tract_tree_sf) + tm_fill("CrimeCt", n=4, pal = "BuPu", title="LA Homicides in 2015")
tm_shape(LAtracts_new) + tm_fill("CrimeCt", n=4, pal = "BuPu", title="LA Homicides in 2015")
LAtracts_new <- merge(LAtracts, crime_tract_count, by="TRACTCE10")
head(LAtracts_new)
tm_shape(LAtracts_new) + tm_fill("CrimeCt", n=4, pal = "BuPu", title="LA Homicides in 2015")
tmap_mode("view")
library(sf)
library(tmap)
library(leaflet)
library(data.table)
library(tidyverse)
LAcrime<-fread("LAPD2015_Violent.csv", header = T)
glimpse(LAcrime)
glipmse(s1)
glimpse(s1)
LAcrime.hom.na <- subset(LAcrime.hom, is.na(LAcrime.hom[,c("longitude", "latitude")]))
glimpse(LAcrime.hom.na) #1 observations
LAcrime.hom2 <- na.omit(LAcrime.hom[,c("DR Number","longitude", "latitude")])
dim(LAcrime.hom2)
st_write(LAcrime.hom2,"LAcrime_hom.shp")
st_write(LAcrime.pts,"LAcrime_hom.shp")
library(sf)
library(tmap)
library(leaflet)
library(data.table)
library(tidyverse)
dim(LAcrime.hom)
LAcrime.pts <- st_as_sf(LAcrime.hom, coords = c("longitude","latitude"), crs = 4326)
LAcrime.hom2 <- na.omit(LAcrime.hom[,c("DR Number","longitude", "latitude")])
str(LAcrime.hom2)
LAcrime.pts <- st_as_sf(LAcrime.hom2, coords = c("longitude","latitude"), crs = 4326)
LAcrime.noNA <- na.omit(LAcrime.hom[,c("DR Number","longitude", "latitude")])
str(LAcrime.noNA)
LAcrime.pts <- st_as_sf(LAcrime.noNA, coords = c("longitude","latitude"), crs = 4326)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Lab5-LACrimes")
LAcrime<-fread("LAPD2015_Violent.csv", header = T)
glimpse(LAcrime)
head(LAcrime)
unique(LAcrime$`Crime Code Description`)
LAcrime.df<- as.data.frame(LAcrime)
# Base R subset:
s1<-subset(LAcrime.df,LAcrime.df$`Crime Code Description`=="CRIMINAL HOMICIDE")
# Base R subset:
s1<-subset(LAcrime.df,LAcrime.df$`Crime Code Description`=!"CRIMINAL HOMICIDE")
# Base R subset:
s1<-subset(LAcrime.df,LAcrime.df$`Crime Code Description`!= "CRIMINAL HOMICIDE")
LAcrime.hom<-rbind(s1)
glimpse(s1)
# Base R subset:
s1<-subset(LAcrime.df,LAcrime.df$`Crime Code Description`== "CRIMINAL HOMICIDE")
LAcrime.hom<-rbind(s1)
glimpse(s1)
head(s1)
# Base R subset:
s1<-subset(LAcrime.df,LAcrime.df$`Crime Code Description`!= "CRIMINAL HOMICIDE")
LAcrime.hom<-rbind(s1)
head(s1)
head(s1)
unique(s1$`Crime Code Description`)
# Base R subset:
s1<-subset(LAcrime.df,LAcrime.df$`Crime Code Description`== "CRIMINAL HOMICIDE")
LAcrime.hom<-rbind(s1)
head(s1)
write.csv(LAcrime.hom,"LAcrime_hom.csv")
str(LAcrime.hom)
write.csv(LAcrime.hom,"LAcrime_hom.csv")
glimpse(LAcrime.hom[,c("longitude","latitude")])
str(LAcrime.hom[,c("longitude", "latitude")])
LAcrime.hom$latitude <- as.numeric(LAcrime.hom$latitude)
LAcrime.hom$longitude <- as.numeric(LAcrime.hom$longitude)
LAcrime.pts <- st_as_sf(LAcrime.hom, coords = c("longitude","latitude"), crs = 4326)
library(tidyverse)
library(tidycensus)
options(tigris_use_cache = TRUE)
census_api_key("7ef44be4f8773a43d2d7dfa398996483762c1549", install=TRUE, overwrite = TRUE)
ACS10ar <- load_variables(2010, "acs5", cache = TRUE)
view(ACS10ar)
IL_zcta <- get_acs(geography = "zcta",
variables = c(poptotal = "B02001_001"),
state = "IL",
year = 2010)
IL_zcta <- get_acs(geography = "zcta",
variables = c(poptotal = "B02001_001"),
year = 2010)
IL_zcta <- get_acs(geography = "zip",
variables = c(poptotal = "B02001_001"),
state = "IL",
year = 2010)
IL_zcta <- get_acs(geography = "zip code tabulation area",
variables = c(poptotal = "B02001_001"),
state = "IL",
year = 2010)
IL_zcta <- get_acs(geography = "zip code tabulation area",
variables = c(poptotal = "B02001_001"),
year = 2010)
IL_zcta <- get_acs(geography = "zip code tabulation area",
variables = c(poptotal = "B02001_001"),
year = 2010,  geometry = TRUE)
zc <- get_acs(geography = "zip code tabulation area", variables = "B19013_001",
summary_var = "B01001_001", geometry = TRUE)
IL_zcta <- get_acs(geography = "zip code tabulation area",
variables = "B02001_001",
year = 2010,  geometry = FALSE)
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2010,  geometry = FALSE)
IL_zcta <- get_acs(geography = "zip code tabulation area",
variables = "B02001_001", summary_var = "B01001_001"
year = 2010,  geometry = FALSE)
IL_zcta <- get_acs(geography = "zip code tabulation area",
variables = "B02001_001", summary_var = "B01001_001",
year = 2010,  geometry = FALSE)
year = 2010_
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2010)
IL_zcta <- get_acs(geography = "county",
variables = "B02001_001",
year = 2010)
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2010)
remotes::install_github("walkerke/tidycensus")
install.packages("remotes")
remotes::install_github("walkerke/tidycensus")
library(tidycensus)
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2010)
options(tigris_use_cache = TRUE)
census_api_key("7ef44be4f8773a43d2d7dfa398996483762c1549", install=TRUE, overwrite = TRUE)
ACS10ar <- load_variables(2010, "acs5", cache = TRUE)
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2010)
IL_zcta <- get_acs(geography = "zcta",
variables = c("B02001_001","B02001_002","B02001_003","B03002_012","B08201_001","B08201_002"),
year = 2010)
library(tidyverse)
library(tidycensus)
options(tigris_use_cache = TRUE)
census_api_key("7ef44be4f8773a43d2d7dfa398996483762c1549", install=TRUE, overwrite = TRUE)
ACS10ar <- load_variables(2010, "acs5", cache = TRUE)
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2010)
ACS10ar <- load_variables(2011, "acs5", cache = TRUE)
IL_zcta <- get_acs(geography = "zcta",
variables = "B02001_001",
year = 2011)
head(IL_zcta)
zcta.2011 <- get_acs(geography = 'zcta', variables = c(pop = "B02001_001",
white ="B02001_002",
black = "B02001_003",
hispan = "B03002_012",
hhld = "B08201_001",
noveh = "B08201_002"),
year = 2011, geometry = FALSE)
head(zcta.2011)
final <- zcta.2011 %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(whtPrc  = white/pop, blkPrc = black/pop,
hispPrc = hispan/pop, novehPrc = noveh/hhld) %>%
select(GEOID,pop,whtPrc,blkPrc,hispPrc, novehPrc)
head(final)
write.csv(final,"ZCTA11.csv")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("tidygeocoder")
options(knitr.duplicate.label = "allow")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(sf)
library(tidycensus)
library(tidyverse)
library(tigris)
Sys.getenv("CENSUS_API_KEY")
library(sf)
library(tidycensus)
library(tidyverse)
library(tigris)
stateDf <- get_acs(geography = 'state', variables = c(totPop18 = "B01001_001",
hispanic ="B03003_003",
notHispanic = "B03003_002",
white = "B02001_002",
afrAm = "B02001_003",
asian = "B02001_005"),
year = 2018, geometry = FALSE)
head(stateDf)
stateDf <- get_acs(geography = 'state', variables = c(totPop18 = "B01001_001",
hispanic ="B03003_003",
notHispanic = "B03003_002",
white = "B02001_002",
afrAm = "B02001_003",
asian = "B02001_005"),
year = 2018, geometry = TRUE)
head(stateDf)
stateDf <- get_acs(geography = 'state', variables = c(totPop18 = "B01001_001",
hispanic ="B03003_003",
notHispanic = "B03003_002",
white = "B02001_002",
afrAm = "B02001_003",
asian = "B02001_005"),
year = 2018, geometry = FALSE)
head(stateDf)
stateDf <- stateDf %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(hispPr18  = hispanic/totPop18,
WhitePr18 = white/totPop18,
AfrAmPr18 = afrAm/totPop18,
AsianPr18 = asian/totPop18) %>%
select(GEOID,totPop18,hispPr18,WhitePr18,AfrAmPr18, AsianPr18)
head(stateDf)
otherVarnames <- load_variables(2018, "acs5", cache = TRUE)
head(pVarnames)
otherVarnames <- load_variables(2018, "acs5", cache = TRUE)
view(pVarnames)
view(otherVarnames)
library(sf)
library(tidycensus)
library(tidyverse)
library(tigris)
Sys.getenv("CENSUS_API_KEY")
load_variables(2018, "acs5", cache = TRUE)
otherVarnames <- load_variables(2018, "acs5", cache = TRUE)
head(pVarnames)
head(otherVarnames)
view(otherVarnames)
sVarnames <- load_variables(2018, "acs5/subject", cache = TRUE)
view(sVarnames)
S0102_C01_097	Estimate!!Total!!Owner-occupied housing units
S0102_C01_090	Estimate!!Total!!Occupied housing units
tractDf <- get_acs(geography = 'tract',variables =
c( totunit = "S0102_C01_090",
owner ="S0102_C01_097"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(ownEP  = owner/totunit) %>%
select(GEOID,ownEP)
head(tractDf)
tractDf <- get_acs(geography = 'tract',variables =
c( totunit = "S0102_C01_090",
owner ="S0102_C01_097"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(ownEP  = owner/totunit) %>%
select(GEOID,ownEP, totunit, owner)
head(tractDf)
write.csv(tractDf)
tractDf <- get_acs(geography = 'tract',variables =
c( totunit = "B25003_001",
owner ="B25003_002	"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(ownEP  = owner/totunit) %>%
select(GEOID,ownEP, totunit, owner)
tractDf <- get_acs(geography = 'tract',variables =
c( totunit = "B25003_001",
owner ="B25003_002"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(ownEP  = owner/totunit) %>%
select(GEOID,ownEP, totunit, owner)
```
tractDf <- get_acs(geography = 'tract',variables =
c(totunit = "B25003_001",
owner ="B25003_002"),
year = 2018, state = 'IL', geometry = FALSE)
tractDf <- get_acs(geography = 'tract',variables =
c(totunit = "B25003_001",
owner ="B25003_002"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(GEOID, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(ownEP  = owner/totunit) %>%
select(GEOID,ownEP, totunit, owner)
head(tractDf)
write.csv(tractDf)
write.csv(tractDf, "owner.csv")
tractDf <- get_acs(geography = 'tract',variables =
c(totunit = "B25003_001",
owner ="B25003_002"),
year = 2018, state = 'IL', geometry = FALSE) %>%
select(tractce10, NAME, variable, estimate) %>%
spread(variable, estimate) %>%
mutate(ownEP  = owner/totunit) %>%
select(tractce10,ownEP, totunit, owner)
head(tractDF)
head(tractdF)
head(tractDf)
substr(tractDf$GEOID, 6,10)
tractDf$tractID <- substr(tractDf$GEOID, 6,10)
write.csv(tractDf, "owner.csv")
head(tractDf)
tractDf$tractID <- substr(tractDf$GEOID, 6,11)
head(tractDf)
write.csv(tractDf, "owner.csv")
write.csv(tractDf, "owner.csv",stringsAsFactors = FALSE)
write.csv(tractDf, "owner.csv",row.names = FALS)
write.csv(tractDf, "owner.csv",row.names = FALSE)
shiny::runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
shiny::runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
shiny::runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
shiny::runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp()
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
runApp('code/OpenAirQ-dashboard')
if(!exists("poly_mat")) {
message("No poly_mat object provided, creating object representing a 9 by 9 square")
poly_mat = cbind(
x = c(0, 0, 9, 9, 0),
y = c(0, 9, 9, 0, 0)
)
}
runApp('code/OpenAirQ-dashboard')
setwd("~/code/Intro2RSpatialMed")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
## How many weeks are in our dataset?
range(as.numeric(COVID$Week.Number))
## How many weeks are in our dataset?
range(as.numeric(COVID$Week.End))
display.brewer.all()
library(tmap)
tm_shape(Chi_Zipsf ) +
tm_polygons("Case.Rate...Cumulative",
style="quantile", pal="BuPu",
title = "COVID Case Rate")
library(tmap)
tm_shape(Chi_Zipsf ) +
tm_polygons("Case.Rate...Cumulative",
style="quantile", pal="BuPu",
title = "COVID Case Rate")
Colorbrewer Tip
bookdown::render_book("index.Rmd", "bookdown::gitbook")
st_write("data/methadoneMOUD.geojson")
st_write(methadoneSf, "data/methadoneMOUD.geojson")
areas <- st_transform(areas, 3435)
areas <- st_read("data/methadoneMOUD.geojson")
points <- st_read("data/ChiZipMaster1.geojson")
areas <- st_transform(areas, 3435)
points <- st_transform(areas, 3435)
pip <- st_join(points, areas, join = st_within)
head(pip)
ptcount <- as.data.frame(table(pip$Zip.x))
head(ptcount)
head(areas)
names(ptcount) <- c("Zip", "MetClnc")
head(ptcount)
areas<- merge(areas, ptcount, by="Zip")
head(areas)
tm_shape(areas) + tm_fill(col = "MetClnc", style = "quantile")
library(sf)
points <- st_read("data/methadoneMOUD.geojson")
areas <- st_read("data/ChiZipMaster1.geojson")
head(points)
head(areas)
areas <- st_transform(areas, 3435)
points <- st_transform(areas, 3435)
pip <- st_join(points, areas, join = st_within)
head(pip)
ptcount <- as.data.frame(table(pip$zip.x))
head(ptcount)
names(ptcount) <- c("Zip", "MetClnc")
head(ptcount)
areas<- merge(areas, ptcount, by="Zip")
library(sf)
points <- st_read("data/methadoneMOUD.geojson")
areas <- st_read("data/ChiZipMaster1.geojson")
head(points)
head(areas)
areas <- st_transform(areas, 3435)
points <- st_transform(areas, 3435)
pip <- st_join(points, areas, join = st_within)
head(pip)
tm_shape(areas) + tm_polygons() +
tm_shape(points) + tm_dots()
points <- st_read("data/methadoneMOUD.geojson")
tm_shape(areas) + tm_polygons() +
tm_shape(points) + tm_dots()
tm_shape(areas) + tm_polygons() +
tm_shape(points) + tm_dots(lwd = 2)
tm_shape(areas) + tm_polygons() +
tm_shape(points) + tm_dots(size = 2)
tm_shape(areas) + tm_polygons() +
tm_shape(points) + tm_dots(size = 1)
pip <- st_join(points, areas, join = st_within)
areas <- st_transform(areas, 3435)
points <- st_transform(areas, 3435)
pip <- st_join(points, areas, join = st_within)
head(pip)
ptcount <- as.data.frame(table(pip$zip.x))
head(ptcount)
dim(pip)
names(ptcount) <- c("Zip", "MetClnc")
head(ptcount)
areas<- merge(areas, ptcount, by="Zip")
areas<- merge(areas, ptcount, by="Zip.x")
areas<- merge(areas, ptcount, by.x="Zip.x", by.y="zip.y")
head(areas)
areas<- merge(areas, ptcount, by.x="zip", by.y="Zip")
head(areas)
tm_shape(areas) + tm_fill(col = "MetClnc", style = "quantile")
pip <- st_join(points, areas, join = st_intersect)
pip <- st_join(points, areas, join = st_within)
pip <- st_join(points, areas, join = st_intersects)
head(pip)
dim(pip)
pip <- st_join(points, areas, join = st_intersects)
pip <- st_join(points, areas, join = st_intersects)
pip <- st_join(points, areas, join = st_intersects)
head(pip)
dim(pip)
head(pip)
dim(pip)
ptcount <- as.data.frame(table(pip$zip.x))
head(ptcount)
